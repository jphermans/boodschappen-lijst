name: Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Generate test coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Build application
      run: npm run build
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files-${{ matrix.node-version }}
        path: dist/
        retention-days: 7

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for vulnerabilities
      run: |
        if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -q '^0$'; then
          echo "No high-severity vulnerabilities found"
        else
          echo "High-severity vulnerabilities detected"
          npm audit --audit-level=high
          exit 1
        fi

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Analyze bundle size
      run: |
        echo "Bundle size analysis:"
        du -sh dist/
        find dist/ -name "*.js" -exec du -h {} \; | sort -hr
        
    - name: Check bundle size limits
      run: |
        MAIN_JS_SIZE=$(find dist/assets -name "index-*.js" -exec stat -c%s {} \; | head -1)
        MAX_SIZE=500000  # 500KB limit for main bundle
        
        if [ "$MAIN_JS_SIZE" -gt "$MAX_SIZE" ]; then
          echo "Main bundle size ($MAIN_JS_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
          exit 1
        else
          echo "Main bundle size ($MAIN_JS_SIZE bytes) is within limits"
        fi

  test-coverage-report:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Comment coverage on PR
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read coverage summary
          const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
          
          if (fs.existsSync(coveragePath)) {
            const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
            const { total } = coverage;
            
            const coverageTable = [
              '## 📊 Test Coverage Report',
              '',
              '| Metric | Percentage | Status |',
              '|--------|------------|--------|',
              `| Statements | ${total.statements.pct}% | ${total.statements.pct >= 70 ? '✅' : '❌'} |`,
              `| Branches | ${total.branches.pct}% | ${total.branches.pct >= 70 ? '✅' : '❌'} |`,
              `| Functions | ${total.functions.pct}% | ${total.functions.pct >= 70 ? '✅' : '❌'} |`,
              `| Lines | ${total.lines.pct}% | ${total.lines.pct >= 70 ? '✅' : '❌'} |`,
              '',
              '**Coverage Target:** 70% minimum for all metrics',
              '',
              total.statements.pct >= 70 && total.branches.pct >= 70 && total.functions.pct >= 70 && total.lines.pct >= 70 
                ? '🎉 All coverage targets met!' 
                : '⚠️ Some coverage targets not met. Please add more tests.'
            ].join('\n');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageTable
            });
          }